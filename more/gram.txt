<Program>       &\rightarrow begin <Code> end\\
<Code>          &\rightarrow \varepsilon\\
                &\rightarrow <InstList>\\
<InstList>      &\rightarrow <Instruction>\\
                &\rightarrow <Instruction> ; <InstList>\\
<Instruction>   &\rightarrow <Assign>\\
                &\rightarrow <If>\\
                &\rightarrow <While>\\
                &\rightarrow <For>\\
                &\rightarrow <Print>\\
                &\rightarrow <Read>\\
<Assign>        &\rightarrow [VarName] := <ExprArith>\\
<ExprArith>     &\rightarrow [VarName]\\
                &\rightarrow [Number]\\
                &\rightarrow (<ExprArith>)\\
                &\rightarrow -<ExprArith>\\
                &\rightarrow <ExprArith> <Op> <ExprArith>\\
<Op>            &\rightarrow +\\
                &\rightarrow -\\
                &\rightarrow *\\
                &\rightarrow /\\
<If>            &\rightarrow if <Cond> then <Code> endif\\
                &\rightarrow if <Cond> then <Code> else <Code> endif\\
<Cond>          &\rightarrow <Cond> <BinOp> <Cond>\\
                &\rightarrow not <SimpleCond>\\
                &\rightarrow <SimpleCond>\\
<SimpleCond>    &\rightarrow <ExprArith> <Comp> <ExpreArith>\\
<BinOp>         &\rightarrow and\\
                &\rightarrow or\\
<Comp>          &\rightarrow =\\
                &\rightarrow >=\\
                &\rightarrow >\\
                &\rightarrow <=\\
                &\rightarrow <\\
                &\rightarrow <>\\
<While>         &\rightarrow while <Cond> do <Code> done\\
<For>           &\rightarrow for [VarName] from <ExprArith> by <ExprArith> to <ExprArith> do <Code> done\\
                &\rightarrow for [VarName] from <ExprArith> to <ExprArith> do <Code> done\\
<Print>         &\rightarrow print([VarName])\\
<Read>          &\rightarrow read([VarName])\\


% -----------------------------
% Suppression variable inutile


<Program>       &\rightarrow begin <InstList> end\\
                &\rightarrow <InstList>\\
<InstList>      &\rightarrow <Instruction>\\
                &\rightarrow \varepsilon\\
                &\rightarrow <Instruction> ; <InstList>\\
<Instruction>   &\rightarrow [VarName] := <ExprArith>\\
                &\rightarrow <If>\\
                &\rightarrow while <Cond> do <Code> done\\
                &\rightarrow <For>\\
                &\rightarrow print([VarName])\\
                &\rightarrow read([VarName])\\
<ExprArith>     &\rightarrow [VarName]\\
                &\rightarrow [Number]\\
                &\rightarrow (<ExprArith>)\\
                &\rightarrow -<ExprArith>\\
                &\rightarrow <ExprArith> <Op> <ExprArith>\\
<Op>            &\rightarrow +\\
                &\rightarrow -\\
                &\rightarrow *\\
                &\rightarrow /\\
<If>            &\rightarrow if <Cond> then <Code> endif\\
                &\rightarrow if <Cond> then <Code> else <Code> endif\\
<Cond>          &\rightarrow <Cond> <BinOp> <Cond>\\
                &\rightarrow not <SimpleCond>v
                &\rightarrow <SimpleCond>\\
<SimpleCond>    &\rightarrow <ExprArith> <Comp> <ExpreArith>\\
<BinOp>         &\rightarrow and\\
                &\rightarrow or\\
<Comp>          &\rightarrow =\\
                &\rightarrow >=\\
                &\rightarrow >\\
                &\rightarrow <=\\
                &\rightarrow <\\
                &\rightarrow <>\\
<For>           &\rightarrow for [VarName] from <ExprArith> by <ExprArith> to <ExprArith> do <Code> done\\
                &\rightarrow for [VarName] from <ExprArith> to <ExprArith> do <Code> donev



% -----------------------------
% Refactoring

<Program>       &\rightarrow begin <InstList> end\\
                &\rightarrow <InstList>\\
<InstList>      &\rightarrow <Instruction>\\
                &\rightarrow \varepsilon\\
                &\rightarrow <Instruction> ; <InstList>\\
<Instruction>   &\rightarrow [VarName] := <ExprArith>\\
                &\rightarrow <If>\\
                &\rightarrow while <Cond> do <Code> done\\ 
                &\rightarrow <For>\\
                &\rightarrow print([VarName])\\
                &\rightarrow read([VarName])\\
<ExprArith>     &\rightarrow [VarName]\\
                &\rightarrow [Number]\\
                &\rightarrow (<ExprArith>)\\
                &\rightarrow -<ExprArith>\\
                &\rightarrow <ExprArith> <Op> <ExprArith>\\
<Op>            &\rightarrow +\\
                &\rightarrow -\\
                &\rightarrow *\\
                &\rightarrow /\\
<If>            &\rightarrow if <Cond> then <Code> <EndIf>\\
<EndIf>         &\rithtarrow endif\\
                &\rightarrow else <Code> endif\\ 
<Cond>          &\rightarrow <Cond> <BinOp> <Cond>\\
                &\rightarrow not <SimpleCond>\\
                &\rightarrow <SimpleCond>\\
<SimpleCond>    &\rightarrow <ExprArith> <Comp> <ExpreArith>\\
<BinOp>         &\rightarrow and\\
                &\rightarrow or\\
<Comp>          &\rightarrow =\\
                &\rightarrow >=\\
                &\rightarrow >\\
                &\rightarrow <=\\
                &\rightarrow <\\
                &\rightarrow <>\\
<For>           &\rightarrow for [VarName] from <ExprArith> <ByFor> to <ExprArith> do <Code> done\\
<ByFor>         &\rightarrow by <ExprArith>\\
                &\rightarrow \varexpsilon\\


% -----------------------------
% Suppression left-recursion
<Program>       &\rightarrow begin <InstList> end\\
                &\rightarrow <InstList>\\
<InstList>      &\rightarrow <Instruction>\\
                &\rightarrow \varepsilon\\
                &\rightarrow <Instruction> ; <InstList>\\
<Instruction>   &\rightarrow [VarName] := <ExprArith>\\
                &\rightarrow <If>\\
                &\rightarrow while <Cond> do <Code> done\\ 
                &\rightarrow <For>\\
                &\rightarrow print([VarName])\\
                &\rightarrow read([VarName])\\
<ExprArith>     &\rightarrow [VarName]\\
                &\rightarrow [Number]\\
                &\rightarrow (<ExprArith>)\\
                &\rightarrow -<ExprArith>\\
                &\rightarrow <ExprArith> <Op> <ExprArith>\\
<Op>            &\rightarrow +\\
                &\rightarrow -\\
                &\rightarrow *\\
                &\rightarrow /\\
<If>            &\rightarrow if <Cond> then <Code> <EndIf>\\
<EndIf>         &\rithtarrow endif\\
                &\rightarrow else <Code> endif\\ 
<Cond>          &\rightarrow <Cond> <BinOp> <Cond>\\
                &\rightarrow not <SimpleCond>\\
                &\rightarrow <SimpleCond>\\
<SimpleCond>    &\rightarrow <ExprArith> <Comp> <ExpreArith>\\
<BinOp>         &\rightarrow and\\
                &\rightarrow or\\
<Comp>          &\rightarrow =\\
                &\rightarrow >=\\
                &\rightarrow >\\
                &\rightarrow <=\\
                &\rightarrow <\\
                &\rightarrow <>\\
<For>           &\rightarrow for [VarName] from <ExprArith> <ByFor> to <ExprArith> do <Code> done\\
<ByFor>         &\rightarrow by <ExprArith>\\
                &\rightarrow \varexpsilon\\


